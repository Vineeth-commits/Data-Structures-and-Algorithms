Chapter 1
    1.1 Identifiers and keywords
        > Identifiers are basically names given to program elements such as variables, arrays, and functions.
        > Keywords are reserved words which have a special meaning and shouldnt be used as an identifier.
        > By convention, keywords must be written in lower-case.
    1.2 Data types
        > In the memory characters are stored in their ASCII code (Binary form).
        > C supports 4 modifiers - signed, unsigned, short and long.
    1.3 Variables and constants
        > A variable is defined as a meaningful name given to a data storage location in the computer memory. 
        > Declaring an constant -
            const float pi = 3.14;
    1.4 Header files
        string.h : for string handling functions
        stdlib.h : for some miscellaneous functions
        stdio.h : for standardized input and output functions
        math.h : for mathematical functions
        alloc.h : for dynamic memory allocation
        conio.h : for clearing the screen
    1.5 Unary operators
        > ++x is equivalent to x = x +1;
        > y = x++ is equivalent to y = x;x = x + 1;
    1.6 Break and continue statements
        > The break statement is used to terminate the execution of the nearest enclosing loop in which it appears.
        > The continue statement skips the code following it and jumps to the next iteration of the nearest loop.
        > To use both (or one of them) the jump statements, a loop is required which has to be enclosed.
    1.7 Passing parameters to functions
        > call by value: The values of the variables are passed by the calling function to the called function.Values of the variables in the calling functions remain unaffected when the arguments are passed using the call-by-value technique.
        > call by reference: The addresses of the variables are passed by the calling function to the called function. The function can change the value of the argument and the change is reflected in the calling function.
    1.8 Pointers
        > Every variable has a value and its address to its memory location.
        > A pointer is a variable which contains the memory location of another variable.
        > Pointer can be used for dynamic memory allocation of a variable. Ex:
            int *ptr;int n=1;
            ptr = &n;
        > *(&n) is equivalent to n;
        > Postfix unary increment (++) and decrement (––) operators have greater precedence than the dereference operator (*).  Therefore, the expression *ptr++ is equivalent to *(ptr++).
        > Null pointer is a pointer variable that doesnt point to any memory location.
            int *p = NULL;
        > A null pointer can also be declared by equating to 0. To make it clear, use 'NULL'.
        > Generic pointers or void pointers is a special pointer that can point to variables of any data type. Use it unless it is necassary.
        > In C, since you cannot have a variable of type void, the void pointer will therefore not point to any data and, thus, cannot be dereferenced. You need to cast a void pointer to another kind of pointer before using it.
        > To point to another pointer, use * for each level of reference. Ex:
            int x = 1;
            int *p, **p2;
            p = &x;
            p2 = &p;
            //printing **p2 will result to 1

    1.9 miscellaneous
        > The address of the variable is denoted by an & sign followed by the name of the variable in scanf().
        > In case of reading strings, we do not use the & sign in the scanf function.
        > The expression x << y is equivalent to multiplication of x by 2y. And the expression x >> y is equivalent to division of x by 2y if x is unsigned or has a non-negative value.
        > Switch executes faster than if-else statements.
        > Do-while is the only iterative loop which checks condition after running the loop body.
        > On 32 bit systems, integer variable is allocated 4 bytes while on 16 bit systems it is allocated 2 bytes.
        > Modulus operator (%) can only be applied on integer operands, and not on float or double operands.
        > Equality operators have lower precedence than relational operators.
        > Among all the operators, comma operator has the lowest precedence.
        > 

