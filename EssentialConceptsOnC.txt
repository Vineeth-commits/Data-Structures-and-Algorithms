Array
    -> It is the collection of similar Data elements.
    -> Declarating and storing of an array -
        int arr[5]; /* 5 blocks of memory is allocated starting from 0 to 4 */
        arr[0] = 25;
        int arr2[] = {1,6,9}
    -> Main memory is divided into - Heap, Stack and code section.
    -> When an array is declared, it is stored in the stack memory(Use malloc to store the array in heap).
    -> A loop can be used to print the contents of an array
        for(int i = 0; i<3; i++)
        {
            printf("%d",arr2[i]);
        }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Structure
    -> It is a collection of data members where all the related data members come under one name. The data members can be of similar type or dissimilar type.
    -> Structure is used for defining user defined data types.
    -> Declaring and accessing of an Structure
        struct Rectangle
        {
            /* assuming integer takes 2 bytes, the whole structure will take 4 bytes */
            int length;
            int breadth;
        };
        /* The memory is not consumed because its just a definition */
        int main()
        {
            struct Rectangle r; /* This is the declaration of structure. Now r occupies 4 */
            struct Rectangle r = {5,2}; /* To declare and initialise structure */
            /* The memory is now allocated in the stack */
            r.length = 15; /* To access a member we use .(dot) operator */
            r.breadth  = 10;
            printf("Area of rectangle is %d",(r.length*r.breadth));
        }
    -> Examples of using structure
        1.Complex numbers (a+ib)
            struct Complex
            {
                /* space = 2 + 2 = 4 bytes
                int real;
                int img;
            };
        2. Student record
            struct Student
            {
                /* space = 2 + 25 + 10 + 50 = 77 bytes */
                int roll;
                char name[25];
                char dept[10];
                char address[50];
                int age;
            };
            int main()
            {
                /* space = 77 * 10 = 770 bytes */
                struct Student s[10]; /* array of structures is declared */
                s[0].age = 17;
                printf("%d",s[0].age);
            }

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pointers
    -> Pointer is an address variable that is meant for storing address of data variable.
    -> Pointers can be used for accessing the data indirectly.
    -> A program can access the stack and code section of the memory directly while the heap cant be accessed directly. 
    -> The need for pointers -
        * So to access heap memory we use pointers.
        * To access external files and resources outside the program
        * Used for passing parameters
    -> Every variable created in C is stored in stack memory.
    -> To allocate memory in heap, we use malloc(). To use this function, we import a library #include<stdlib.h>
    -> malloc() takes in the amount of size required in the heap memory. It is given in bytes.
    -> Declaring and accessing of a pointer -
        1. Accessing stack memory
            int main()
            {
                int a = 10; /* data variable, Since the variable is 2 bytes, it has 2 address */
                int *p; /* address variable, a pointer also occupies memory of 2 bytes and has 2 address*/
                /* Consider the address of a variable as 200/201 and address of p pointer as 210/211 */
            
                p = &a; /* initialise of pointer */
                /* The pointer stores the address of a i.e 200/201 */

                printf("%d",a); /* prints 10 */
                printf("%d", *p); /* prints 10, the portion with *p is dereferencing*
            }
        2. Accessing Heap memory
            #include<stdlib.h>
            int main()
            {
                int *p;
                p = (int *)malloc(5*sizeOf(int)); /* Now 5*2(assuming) = 10 bytes is allocated to the heap memory */ 
                /* Since the malloc function returns void pointer, we type cast it to integer pointer */
                /* In C++, we use new keyword to allocate memory in heap
                    p = new int[5];
                */
            }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reference(Only available in C++)
    ->It is an alias given to the variable. The address of reference is same as that of the variable it is refering
    -> Example
        int main()
        {
            int a = 10; // Stored in stack memory
            int &r = a; // A reference is defined by &(ampersand)
            cout<<a; // prints 10;
            r++;
            cout<<a; // prints 11;
            cout<<r; // prints 11;
        }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pointer to a Structure
    -> Example 1 (Stack)
        struct Rectangle
        {
            int length;
            int breadth;
        };
        int main()
        {
            struct Rectangle r = {10,5};
            struct Rectangle *p = &r;/* The size of the pointer is equal to the interger. Its always 2 bytes condsidering integer to be 2 bytes. */
            r.length = 20;
            (*p).length = 10; /* The higher precedence is for .(dot) operator, so we wrap *p */
            /* The alternative to the above statement is given below */
            p->length = 20;
        }
    -> Example (heap - dynamically)
        struct Rectangle
        {
            int length;
            int breadth;
        };
        int main()
        {
            struct Rectangle *p;
            p = (struct Rectangle *) malloc(sizeof(struct Rectangle));
            /* Since malloc returns void pointer, we type cast it as a Rectangle type structure pointer */
            p->length = 14;
            p->breadth = 6;
        }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Functions
    -> It is a group is instructions to perform a task. Functions help to break down into smaller modules. This helps in reusability
    -> Using functions and integrating into main function is called modular programming.
    -> Parameter passing methods -
        * Pass by value
        * Pass by address
        * Pass by reference(C++, not in C)
    -> Example of pass by value
        void swap(int x, int y) /* Formal parameters */
        {
            x = x + y;
            y = x - y;
            x = x - y; 
        }
        int main()
        {
            int a,b;
            a = 10;
            b = 20;
            swap(a,b); /* actual parameters */
            printf("%d %d", a,b);
        }
        /* In this the actual parameters are not changed */
    -> Example of pass by address
        void swap(int *x, int *y) /* Formal parameters */
        {
            *x = *x + *y;
            *y = *x - *y;
            *x = *x - *y; 
        }
        int main()
        {
            int a,b;
            a = 10;
            b = 20;
            swap(&a,&b); /* actual parameters */
            printf("%d %d", a,b);
        }
        /* In this actual parameters are changed */
    -> Example of pass by reference
        void swap(int &x, int &y) /* Formal parameters */
        {
            x = x + y;
            y = x - y;
            x = x - y; 
        }
        int main()
        {
            int a,b;
            a = 10;
            b = 20;
            swap(a,b); /* actual parameters */
            printf("%d %d", a,b);
        }
        /* In this actual parameters are changed */
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Array as parameter
    -> Example for passing an array
        void output(int arr[], int n)
        {
            for(int i = 0;i<n;i++)
                printf("%d",arr[i]);
        }
        int main()
        {
            int arr[5] = {1,2,4,5,7};
            output(arr,5);
        }
        /* Array is passed only by address and cant be passed by value */
    -> Example for returning an array
        int[] output(int n)
        {
            int *p;
            p = (int *)malloc(n*sizeof(int));
            return (p);
        }
        int main()
        {
            int *arr;
            arr = output(5);
        }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Structure as parameter
    -> Example
        struct rectangle
        {
            int length;
            int breadth;
        };
        int area(struct rectangle r1)
        {
            r1.length++; /* This doesnt affect the actual parameters value
            return (r1.length*r1.breadth);
        }
        int main()
        {
            struct rectangle r = {20,23};
            printf("%d",area(r));
        }
    -> Example by reference
        struct rectangle
        {
            int length;
            int breadth;
        };
        int changeLength(struct rectangle &r1)
        {
            r1.length++; /* This does affect the actual parameters value since this is reference */
            return (r1.length);
        }
        int main()
        {
            struct rectangle r = {20,23};
            printf("%d",changeLength(r));
        }
    -> Example by address
        struct rectangle
        {
            int length;
            int breadth;
        };
        int changeLength(struct rectangle *p)
        {
            p->length++; /* This does affect the actual parameters value
            return (p->length);
        }
        int main()
        {
            struct rectangle r = {20,23};
            printf("%d",changeLength(&r));
        }
    /* An array cant be passed by value but a structure containing an array can be passed by value by passing the structure */
    -> Example
        struct Arr
        {
            int arr[5];
            int n;
        };
        void test(struct Arr a1) /* A new memory is allocated and changes made is independent of formal parameters */
        {
            ...
        }
        int main()
        {
            struct Arr a = {{5,4,3,4,6},5};
            test(a);
        }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Structure and Functions
    -> Example
        struct rectangle
        {
            int length;
            int breadth;
        };
        void initialise(struct rectangle *r,int l,int b)
        {
            (*r).length = l;
            r->breadth = b;
        }
        void area(struct rectangle r)
        {
            r->length*r->breadth;
        }
        void changeLength(struct rectangle *r, int l)
        {
            r->length = l;
        }
        int main()
        {
            struct rectangle r;
            initialise(&r,10,5);
            area(r);
            changeLength(&r,15);
        }
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Changing C program to C++
    ->Example from the last one
       class Rectangle
        {
            private:
                int length;
                int breadth;
        Rectangle(int l,int b) // Constructor is used to initialise the object
        {
            length = l;
            breadth = b;
        }
        void area()
        {
            length*breadth;
        }
        void changeLength(int l)
        {
            length = l;
        }
        int main()
        {
            Rectangle r(10,5);
            r.area();
            r.changeLength(15);
        }
        }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class and constructor(C++)
    -> Example
        #include<iostream>
        using namespace std;

        class Rectangle
        {
            private:
                int length;
                int breadth;
            public:
                // Constructor overloading
                Rectangle(){
                    length = 4;
                    breadth = 5;
                }
                Rectangle(int l, int b); // prototype or a signature of a function
                int area();
                int perimeter();
                int getLength(){ return length;}
                void changeLength(int l){ length = l;}
                // Destructor
                ~Rectangle();
        };
        Rectangle::Rectangle(int l,int b)
        {
            length = l;
        }
        int Rectangle::area()
        {
            return length*breadth;
        }
        int Rectangle::perimeter()
        {
            return 2*(length+breadth);
        }
        Rectangle::~Rectangle()
        {

        }
        int main()
        {
            Rectangle r(10,5);
            cout<<r.area;
            cout<<r.perimeter;
            r.changeLength(15);
            cout<<r.getLength;
        }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Template class(C++)
    -> Generic class is created to operate on any type of data using Template
    -> Example
        template <class T>
        class Arithmetic
        {
            private:
                T a;
                T b;
            public:
                Arithmetic(T a, T b);
                T add();
                T sub();
        };

        template <class T>
        Arithmetic<T>::Arithmetic(T a,T b)
        {
            this->a=a; // this points to the object
            this->b=b;
        }
        template <class T>
        T Arithmetic<T>::add()
        {
            T c;
            c = a+b;
            return c;
        }
        T template <class T>
        Arithmetic<T>::sub()
        {
            T c;
            c = a-b;
            return c;
        }
        int main()
        {
            Arithmetic<int> ar(10,5);
            cout<<ar.add();
            Arithmetic<float> ar(13.4,4.4);
            cout<<arr.sub();
        }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
